// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Role {
  Teacher
  Student
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  role     Role
  students Student[]
  teachers Teacher[]
}

model Student {
  id           Int           @id @default(autoincrement())
  name         String
  number       Int
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  classroomId  Int
  classroom    Classroom     @relation(fields: [classroomId], references: [id])
  clubId       Int?
  club         Club?         @relation(fields: [clubId], references: [id])
  healthChecks HealthCheck[]
}

model Teacher {
  id           Int           @id @default(autoincrement())
  name         String
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  classroomId  Int?
  classroom    Classroom?    @relation(fields: [classroomId], references: [id])
  clubId       Int?
  club         Club?         @relation(fields: [clubId], references: [id])
  healthChecks HealthCheck[]
}

model Classroom {
  id       Int       @id @default(autoincrement())
  grade    Int
  name     String
  students Student[]
  teachers Teacher[]
}

model Club {
  id       Int       @id @default(autoincrement())
  name     String
  students Student[]
  teachers Teacher[]
}

model HealthCheck {
  id               Int      @id @default(autoincrement())
  date             DateTime
  wakeUpTime       DateTime
  bedTime          DateTime
  nightTemp        Float
  morningTemp      Float
  cough            Boolean // 咳
  stuffiness       Boolean // 息苦しさ
  languor          Boolean // だるさ
  lessAppetite     Boolean // 食欲の減退
  goHospital       Boolean // 通院
  comment          String   @default("")
  studentId        Int
  student          Student  @relation(fields: [studentId], references: [id])
  checkedTeacherId Int?
  checkedTeacher   Teacher? @relation(fields: [checkedTeacherId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
